#include <iostream>
#include <vector>

using namespace std;

struct point3d {
    int x, y, z;
    point3d(int x = 0, int y = 0, int z = 0) : x(x), y(y), z(z) {}
    point3d operator-(const point3d &o) const {
        return point3d(x - o.x, y - o.y, z - o.z);
    }
    point3d cross(const point3d &o) const {
        return point3d(y * o.z - z * o.y, z * o.x - x * o.z, x * o.y - y * o.x);
    }
    int dot(const point3d &o) const {
        return x * o.x + y * o.y + z * o.z;
    }
};

// A face is represented by the indices of its three points a, b, c.
// It also stores an outward-facing normal vector q
struct face {
    int a, b, c;
    point3d q;
};

// finds area of quadrilateral formed using three vertices. This is used for initialising the first face.
int area(point3d p1,point3d p2,point3d p3){
    point3d ans=(p2-p1).cross(p3-p1);
    int a=ans.x;
    int b=ans.y;
    int c=ans.z;
    int area=a*a+b*b+c*c;
    return area;
}

vector<face> convexhull(const vector<point3d> &p) {
    int n = p.size(); 
    vector<face> f;

    // Consider an edge (a->b) visible if it is not a CCW edge of some current face
    // If an edge is alive but not its reverse, this is an exposed edge.
    // We should add new faces on the exposed edges.
    vector<vector<bool>> visible(n, vector<bool>(n, true));
    // Here a,b,c are the indexes of the points that we are adding along with the cross product
    auto add_face = [&] (int a, int b, int c) {           
        f.push_back({a, b, c, (p[b] - p[a]).cross(p[c] - p[a])});
        visible[a][b] = visible[b][c] = visible[c][a] = false;
    };

    /* [&] means capture all variables within scope by reference then add a new face to list of faces f by adding the vertices
    and also we store the normal in the face struct format designed*/

    // Initialize the convex hull of the first 3 points as a
    // triangular disk with two faces of opposite orientation
    // We initialise the convex hull by making a triangle and setting the faces as not visible

    for(int i=2;i<n;i++){
        if(area(p[0],p[1],p[i]) != 0){
            add_face(0, 1, i);
            add_face(0,i ,1);
            break;
        }
    }
    for(int i=2;i<n;i++) {
        // f2 will be the list of faces invisible to the added point p[i]
        vector<face> f2;
        for(auto &F : f) {
            if((p[i] - p[F.a]).dot(F.q) > 0) {
                // this face is visible to the new point, so mark its edges as visible
                visible[F.a][F.b] = visible[F.b][F.c] = visible[F.c][F.a] = true;
            }
            else {
                f2.push_back(F);
            }
        }
        // Add a new face for each exposed edge.
        // Only check edges of alive faces for being exposed.
        f.clear();
        for(auto &F : f2) {
            int arr[3] = {F.a, F.b, F.c};
            for(int j=0;j<3; j++) {
                int a = arr[j], b = arr[(j+1)%3]; //By doing this the values go as (1,2);(2,3);(3,1) making it anti-clockwisecyclic 
                if(visible[b][a]) {
                    add_face(b, a, i);
                }
            }
            f.push_back(F);
        }
        //for (auto &F :f2) f.push_back(F);
        //f.insert(f.end(),f2.begin(),f2.end());  //This is adding the two vectors together like f2+f(first f2 then f)
    }
    return f;
    }


int main(){
    vector<point3d> hull;
    hull.push_back(point3d(200,0,0));
    hull.push_back(point3d(300,0,0));
    hull.push_back(point3d(0,300,0));
    hull.push_back(point3d(0,0,300));
    hull.push_back(point3d(300,300,300));
    hull.push_back(point3d(500,500,500));


    vector<face> v;
    v= convexhull(hull);

    for(int i=0;i<v.size();i++){
        cout << v[i].a << " " << v[i].b << " " << v[i].c << endl;
    }
    
}